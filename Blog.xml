<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom"><title type="text">Blog - Chris Maughan&#39;s Additional Storage</title><id>https://chrismaughan.com/Blog</id><updated>2021-07-27</updated><link href="https://chrismaughan.com/Blog"/><icon>https://chrismaughan.com/secondbrainstatic/favicon.png</icon><entry><id>https://chrismaughan.com/Digital_Garden</id><title type="text">Digital Garden</title><updated>2021-07-27</updated><content type="html">&lt;p&gt;I have simple requirements for a digital garden. It should be easy to edit using my favourite tools, and trivial to deploy. I want the content in the most simple form it can be, and easy to move around. I want to edit with Vim keystrokes.&lt;/p&gt;&lt;p&gt;Without going into details about previous attempts (wordpress, tiddlywiki, hugo, jekyll, etc.), here is a great system I’ve settled on.&lt;/p&gt;&lt;p&gt;All my blog and articles are trivial markdown files. Links with double square brackets between pages. A little bit of front matter in the markdown files to add dates for blogs and the occasional tags.&lt;/p&gt;&lt;p&gt;Visual Studio code and Vim have great plugins for working with Markdown. In particular Visual Studio Code lets me trivially jump between markdown links, and shows my inline images in the preview window. These tools automatically install and work great; along with the Vim extension - a requirement for me.&lt;/p&gt;&lt;p&gt;&lt;a href=&#34;https://neuron.zettel.page&#34;&gt;Neuron&lt;/a&gt; is great as a static site generator, taking my markdown notes and turning them into a clean set of pages. Github actions mean that all I have to do is &lt;strong&gt;git push&lt;/strong&gt; my site to publish it. I’ve customised it a bit with some JS script for adding social sharing links, etc. And I have to add 4 lines of &lt;strong&gt;div&lt;/strong&gt; elements to each blog page; only a minor annoyance and I could automate it too.&lt;/p&gt;&lt;p&gt;&lt;a href=&#34;https://obsidian.md&#34;&gt;Obsidian&lt;/a&gt; is an alternative editor, for when I want deep search and cool graph visualization of my pages.&lt;/p&gt;&lt;div class=&#34;ui section divider&#34;&gt;&lt;/div&gt;
&lt;section id=&#34;socialMediaLinks&#34;&gt;&lt;/section&gt;
&lt;div class=&#34;ui section divider&#34;&gt;&lt;/div&gt;
&lt;div id=&#34;disqus_thread&#34;&gt;&lt;/div&gt;</content><link href="https://chrismaughan.com/Digital_Garden"/></entry><entry><id>https://chrismaughan.com/Box_and_Wires</id><title type="text">Box and Wires</title><updated>2021-07-18</updated><content type="html">&lt;p&gt;I have been experimenting with a wire-graph approach to hooking up my synthesizer. Here’s a little video of a work in progress. The connections between the nodes show the waveforms passing along them; this is suprisingly useful from a debugging point of view!&lt;/p&gt;&lt;iframe width=&#34;100%&#34; height=&#34;560&#34; src=&#34;https://www.youtube.com/embed/1pwffO_61vU&#34; title=&#34;YouTube video player&#34; frameborder=&#34;0&#34; allow=&#34;accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture&#34; allowfullscreen&gt;&lt;/iframe&gt;
&lt;div class=&#34;ui section divider&#34;&gt;&lt;/div&gt;
&lt;section id=&#34;socialMediaLinks&#34;&gt;&lt;/section&gt;
&lt;div class=&#34;ui section divider&#34;&gt;&lt;/div&gt;
&lt;div id=&#34;disqus_thread&#34;&gt;&lt;/div&gt;
</content><link href="https://chrismaughan.com/Box_and_Wires"/></entry><entry><id>https://chrismaughan.com/Regex_and_finite_automata</id><title type="text">Regular Expressions and Finite Automata</title><updated>2019-08-16</updated><content type="html">&lt;p&gt;Regular Expressions are something I often struggle with. I need to level-up.&lt;/p&gt;&lt;p&gt;&lt;a href=&#34;https://swtch.com/~rsc/regexp/regexp1.html&#34;&gt;This is an interesting article&lt;/a&gt; on implementing regular expressions in C++ using Finite Automata. York ACCU has a talk about implementing &lt;a href=&#34;https://bit.ly/accu-york-june2019&#34;&gt;regex in C++&lt;/a&gt;&lt;/p&gt;&lt;div class=&#34;ui section divider&#34;&gt;&lt;/div&gt;
&lt;section id=&#34;socialMediaLinks&#34;&gt;&lt;/section&gt;
&lt;div class=&#34;ui section divider&#34;&gt;&lt;/div&gt;
&lt;div id=&#34;disqus_thread&#34;&gt;&lt;/div&gt;
</content><link href="https://chrismaughan.com/Regex_and_finite_automata"/></entry><entry><id>https://chrismaughan.com/GraphViz</id><title type="text">GraphViz</title><updated>2019-07-01</updated><content type="html">&lt;p&gt;GraphViz is an awesome way to visualize your code when debugging problems, and it is trivial to setup.&lt;/p&gt;&lt;p&gt;Sometimes you need to visualize data structures in your code. GraphViz is your friend. I’ve been working on a live coding project in my spare time. This weekend I worked on a parser for the little music language I’ve been working on. Here’s an example line of code from the language:&lt;/p&gt;&lt;p&gt;c1 | sound(c4 e4 g4).gain(.5)&lt;/p&gt;&lt;p&gt;Although the language is not fully specified yet, this is a simple fragment, and enough to get me started. The language itself is an experiment based on patterns (like Tidal Cycles) - and may well be one of several different experiments I do. Briefly, this fragment means ’make a list of 3 notes (CEG), and apply .5 gain to it, then ‘pipe’ it into audio channel 1.&lt;/p&gt;&lt;p&gt;If you aren’t familiar with writing compilers, the basic idea is usually to decompose the code into ‘tokens’ and then build a connected tree of the tokens using a parser. The resulting data structure is called an Abstract Syntax Tree. Once you have the AST, you can use it to generate the program you want to run. The tree essentially shows you how to interpret the program. The problem we have now is to check that the tree is correct. We could just plough on and start building code fragments from the tree, but it would be nice if we could look at it.&lt;/p&gt;&lt;p&gt;I generate visualisations of tree structures by outputing the tree as a ‘dot’ file representation. This has been very useful on several occasions.&lt;/p&gt;&lt;p&gt;Dot files are a really simple format, especially if you just want a basic visualization. To build a dot file, you just list every pair of node/child links in a text file. You just need each node to have a unique Id. If you provide ‘label’ lines, you can also change the text of the node in the display - but you don’t even have to do that if the node labels are nicely formed.&lt;/p&gt;&lt;p&gt;Here’s an example:&lt;/p&gt;&lt;pre&gt;&lt;code class=&#34;language-none&#34;&gt;digraph AST 
{
    Node_1 [label = &amp;quot;My Node 1&amp;quot;];
    Node_3 [label = &amp;quot;My Node 3&amp;quot;];
    Node_Out [label = &amp;quot;My Node Out&amp;quot;];

    Node_1 -&amp;gt; Node_Out;
    Node_3 -&amp;gt; Node_Out;
}&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;It is trivial to write the above to debug output; assuming you can convert your node ID to a valid string, and you have a friendly name for it:&lt;/p&gt;&lt;pre&gt;&lt;code class=&#34;cpp language-cpp&#34;&gt;std::ostringstream str;
str &amp;lt;&amp;lt; &amp;quot;digraph AST\n&amp;quot; 

// Make the labels: not usually necessary
for(auto&amp;amp; node : nodes)
    str &amp;lt;&amp;lt; to_string(node.id()) &amp;lt;&amp;lt; &amp;quot; [label = \&amp;quot;&amp;quot; &amp;lt;&amp;lt; node.name() &amp;lt;&amp;lt; &amp;quot;\&amp;quot;];\n&amp;quot;;

// Make the connections (every node to every child it has)
for auto&amp;amp; node : nodes)
{
    for(auto&amp;amp; child : node.children)
    {
        str &amp;lt;&amp;lt; to_string(node.id()) &amp;lt;&amp;lt; &amp;quot;-&amp;gt;&amp;quot; &amp;lt;&amp;lt; to_string(child.id()) &amp;lt;&amp;lt; &amp;quot;;\n&amp;quot;;
    }
}

str &amp;lt;&amp;lt; &amp;quot;}\n&amp;quot;;

// Log it however you want
std::cout &amp;lt;&amp;lt; str.str();&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;The great thing about this is you don’t even have to install graphviz. Just go to &lt;a href=&#34;http://webgraphviz.com&#34;&gt;http://webgraphviz.com&lt;/a&gt; and paste your text. You can download graphviz instead if you need to keep your data structure private, but I mostly just paste my tests into the site. Here’s what happens if you paste the digraph into webgraphviz:&lt;/p&gt;&lt;pre&gt;&lt;code class=&#34;graphviz language-graphviz&#34;&gt;digraph AST 
{
    Node_1 [label = &amp;quot;My Node 1&amp;quot;];
    Node_3 [label = &amp;quot;My Node 3&amp;quot;];
    Node_Out [label = &amp;quot;My Node Out&amp;quot;];

    Node_1 -&amp;gt; Node_Out;
    Node_3 -&amp;gt; Node_Out;
}&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Nice! An easy way to visualize data relationships in your code…. done. GraphViz has many more features, and you can play with some examples on the above site too. As a side-note, the graph above is automatically generated inside the blogging platform I’m using (neuron), so it is easy to add to blog posts too.&lt;/p&gt;&lt;p&gt;Here is an example from the code snippet above. You are seeing the finished, correct version of the AST tree here. The interesting part of this exercise in visualizing my code was that the ‘|’ and ‘.’ operators in the graph were swapped - indicating that the ‘|’ had higher precedence in my syntax parser than the ‘.’. Fixing the preference order of the operators did not immediately fix the problem either, becuase I had actually broken the AST parsing of the operators.&lt;/p&gt;&lt;p&gt;Short story; visualize what you are doing - it can save a lot of time! It is certainly worth the 10 minutes of effort it takes to output your data as an image.&lt;/p&gt;&lt;p&gt;If you want to learn more about language parsing, the LLVM tutorial is quite nice - and a good refresher for me!:&lt;/p&gt;&lt;p&gt;&lt;a href=&#34;https://llvm.org/docs/tutorial/&#34;&gt;LLVM Tutorial&lt;/a&gt;&lt;/p&gt;&lt;pre&gt;&lt;code class=&#34;language-none&#34;&gt;digraph AST 
{
Id_32 [label = &amp;quot;P:__anon__(), Fn:=&amp;quot;];
Id_30 [label = &amp;quot;=&amp;quot;];
Id_22 [label = &amp;quot;c1&amp;quot;];
Id_29 [label = &amp;quot;.&amp;quot;];
Id_26 [label = &amp;quot;pat(...)&amp;quot;];
Id_23 [label = &amp;quot;c4&amp;quot;];
Id_24 [label = &amp;quot;e4&amp;quot;];
Id_25 [label = &amp;quot;g4&amp;quot;];
Id_28 [label = &amp;quot;gain(...)&amp;quot;];
Id_27 [label = &amp;quot;0.5&amp;quot;];
Id_32-&amp;gt;Id_30;
Id_30-&amp;gt;Id_22;
Id_30-&amp;gt;Id_29;
Id_29-&amp;gt;Id_26;
Id_29-&amp;gt;Id_28;
Id_26-&amp;gt;Id_23;
Id_26-&amp;gt;Id_24;
Id_26-&amp;gt;Id_25;
Id_28-&amp;gt;Id_27;
}&lt;/code&gt;&lt;/pre&gt;&lt;pre&gt;&lt;code class=&#34;graphviz language-graphviz&#34;&gt;digraph AST {
Id_32 [label = &amp;quot;P:__anon__(), Fn:=&amp;quot;];
Id_30 [label = &amp;quot;=&amp;quot;];
Id_22 [label = &amp;quot;c1&amp;quot;];
Id_29 [label = &amp;quot;.&amp;quot;];
Id_26 [label = &amp;quot;pat(...)&amp;quot;];
Id_23 [label = &amp;quot;c4&amp;quot;];
Id_24 [label = &amp;quot;e4&amp;quot;];
Id_25 [label = &amp;quot;g4&amp;quot;];
Id_28 [label = &amp;quot;gain(...)&amp;quot;];
Id_27 [label = &amp;quot;0.5&amp;quot;];
Id_32-&amp;gt;Id_30;
Id_30-&amp;gt;Id_22;
Id_30-&amp;gt;Id_29;
Id_29-&amp;gt;Id_26;
Id_29-&amp;gt;Id_28;
Id_26-&amp;gt;Id_23;
Id_26-&amp;gt;Id_24;
Id_26-&amp;gt;Id_25;
Id_28-&amp;gt;Id_27;
}&lt;/code&gt;&lt;/pre&gt;&lt;div class=&#34;ui section divider&#34;&gt;&lt;/div&gt;
&lt;section id=&#34;socialMediaLinks&#34;&gt;&lt;/section&gt;
&lt;div class=&#34;ui section divider&#34;&gt;&lt;/div&gt;
&lt;div id=&#34;disqus_thread&#34;&gt;&lt;/div&gt;
</content><link href="https://chrismaughan.com/GraphViz"/></entry><entry><id>https://chrismaughan.com/AdventOfCode_Asteroids</id><title type="text">Advent Of Code - Day 10, 2018</title><updated>2018-12-11</updated><content type="html">&lt;p&gt;Here’s my solution to day 10 of Advent Of Code 2018; inside the asteroids game The problem was to simulate a set of stars and figure out the password they spelled out at the minimumm distance.&lt;/p&gt;&lt;p&gt;&lt;a href=&#34;https://www.reddit.com/r/adventofcode/comments/a4xzuf/solved_inside_an_asteroids_game/?utm_source=share&amp;amp;utm_medium=web2x&#34;&gt;https://www.reddit.com/r/adventofcode/comments/a4xzuf/solved_inside_an_asteroids_game/?utm_source=share&amp;amp;utm_medium=web2x&lt;/a&gt;&lt;/p&gt;&lt;div class=&#34;ui section divider&#34;&gt;&lt;/div&gt;
&lt;section id=&#34;socialMediaLinks&#34;&gt;&lt;/section&gt;
&lt;div class=&#34;ui section divider&#34;&gt;&lt;/div&gt;
&lt;div id=&#34;disqus_thread&#34;&gt;&lt;/div&gt;
</content><link href="https://chrismaughan.com/AdventOfCode_Asteroids"/></entry></feed>